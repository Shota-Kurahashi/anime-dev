# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PostCount {
  comments: Int!
}

type Post {
  id: ID!
  ipaddress: Float
  user: User
  userId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  authorRole: Role!
  authorName: String!
  startTime: DateTime!
  title: String!
  episode: Int
  category: Category!
  content: String
  participant: [String!]
  comments: [Comment!]
  like: [String!]
  public: Boolean!
  url: String
  deleted: Boolean!
  _count: PostCount!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Role {
  ANONYMOUS
  AUTHENTICATED
}

enum Category {
  Anime
  Drama
  DramaMovie
  AnimeMovie
  Manga
  Doujinshi
  TV
  Music
  Unknown
}

type Comment {
  id: ID!
  ipAddress: Float
  user: User
  userId: String
  authorName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  post: Post!
  postId: String!
  authorRole: Role!
  content: String!
  likes: [String!]
  unLiked: [String!]
  twitterId: String
  facebookId: String
  youtubeId: String
  instagramId: String
  tiktokId: String
  spoiler: Boolean!
  spoilers: [String!]
  deleted: Boolean!
}

type Profile {
  id: ID!
  user: User!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  favorite: [String!]
  twitterId: String
  facebookId: String
  youtubeId: String
  instagramId: String
  tiktokId: String
  img: String
}

type UserCount {
  posts: Int!
  comments: Int!
}

type User {
  id: ID!
  email: String!
  hashedPassword: String!
  hashedRefreshToken: String
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  profile: Profile
  posts: [Post!]
  comments: [Comment!]
  follow: [String!]
  followed: [String!]
  ipaddress: Float
  loginStatus: Boolean!
  deleted: Boolean!
  _count: UserCount!
}

type Auth {
  accessToken: String
  refreshToken: String
  message: String
}

type Query {
  user(username: String!): User!
  posts: [Post!]!
  post(id: Int!): Post!
  profile(userId: String!): Profile!
  comments: [Comment!]!
  comment(id: Int!): Comment!
}

type Mutation {
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  createPost(createPostInput: CreatePostInput!): Post!
  updatePost(updatePostInput: UpdatePostInput!): Post!
  removePost(id: Int!): Post!
  createProfile(createProfileInput: CreateProfileInput!): Profile!
  updateProfile(updateProfileInput: UpdateProfileInput!): Profile!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  removeComment(id: Int!): Comment!
  login(authInput: AuthInput!): Auth!
  sighUp(authInput: AuthInput!): Auth!
  logout: Auth!
  refresh: Auth!
}

input UpdateUserInput {
  id: String!
}

input CreatePostInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdatePostInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateProfileInput {
  """Example field (placeholder)"""
  userId: String!
}

input UpdateProfileInput {
  """Example field (placeholder)"""
  userId: String
  id: Int!
}

input CreateCommentInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateCommentInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input AuthInput {
  email: String!
  password: String!
}